Upset plot
==========
| To visualize the intersection between more than 3 sets, the best option is to use an UpSet plot.
| Heatgraphy can also generate an flexible UpSet plot.


Data Input
----------

| The data of upset is handled by :class:`UpsetData <heatgraphy.upset.UpsetData>`. It contains helpful methods to help you query information about different sets.
| And the result could be used to get information of sets.
For example, if you want know size of each set , you could use :meth:`set_size() <heatgraphy.upset.UpsetData.sets_size>` funcction.


.. code-block:: python

    >>> from heatgraphy.upset import UpsetData
    >>> from heatgraphy.upset import Upset
    >>> import pandas as pd
    >>> import matplotlib as mpl
    >>> src = "https://raw.githubusercontent.com/peetck/IMDB-Top1000-Movies/master/IMDB-Movie-Data.csv"
    >>> imdb = pd.read_csv(src).drop_duplicates('Title')
    >>> items_attrs = imdb[['Title', 'Year',
    >>>       'Runtime (Minutes)', 'Rating', 'Votes', 'Revenue (Millions)',
    >>>       'Metascore']].set_index('Title')
    >>> upset_data = UpsetData.from_memberships(imdb.Genre.str.split(','),
    >>>                                           items_names=imdb['Title'], items_attrs=items_attrs)
    >>> upset_data.sets_size()


|
A minimum UpSet plot
--------------------

It is important to note that data generated by :meth:`Upsetdata <heatgraphy.upset.UpsetData>`
is just the intermediate state, you should further used :class:`Upset <heatgraphy.upset.Upset>`
to gain the result that could use :meth:`render() <heatgraphy.base.Base.render>`
to plot.

.. plot::
    :context: close-figs

    >>> from heatgraphy.upset import UpsetData
    >>> from heatgraphy.upset import Upset
    >>> import pandas as pd
    >>> src = "https://raw.githubusercontent.com/peetck/IMDB-Top1000-Movies/master/IMDB-Movie-Data.csv"
    >>> imdb = pd.read_csv(src).drop_duplicates('Title')
    >>> items_attrs = imdb[['Title', 'Year',
    >>>       'Runtime (Minutes)', 'Rating', 'Votes', 'Revenue (Millions)',
    >>>       'Metascore']].set_index('Title')
    >>> upset_data = UpsetData.from_memberships(imdb.Genre.str.split(','),
    >>>                                           items_names=imdb['Title'], items_attrs=items_attrs)
    >>> usp = Upset(upset_data, add_labels=False, add_sets_size=False, min_size=20)
    >>> usp.render()

Now we have a basic UpSet plot.

Add labels and numbers
----------------------

Then we can add labels and size numbers. The order in which they are added will affect the order in which they appear on the graph.

.. plot::
    :context: close-figs

    >>> usp.add_legends()
    >>> usp.add_sets_label(side="left")
    >>> usp.add_sets_size(side="left",pad=0.5)
    >>> usp.render()


Highlight specific objects
--------------------------

If we want to highlight certain parts, we can call :meth:`highlight_subsets() <heatgraphy.upset.Upset.highlight_subsets>`
to change color.

.. plot::
    :context: close-figs

    >>> usp = Upset(upset_data,add_labels=False,add_sets_size=False,min_size=20)
    >>> usp.add_legends()
    >>> usp.add_sets_label(side="left")
    >>> usp.add_sets_size(side="left",pad=0.5)
    >>> usp.highlight_subsets(facecolor='blue', min_size=30,max_size = 40,label="40 >= intersections >= 30")
    >>> usp.highlight_subsets(facecolor='red', min_size=20,max_size = 30,label="30 >= intersections >= 20")
    >>> usp.render()

|
Color of each set size can also be adjusted.

.. plot::
    :context: close-figs

    >>> usp = Upset(upset_data,add_labels=False,add_sets_size=False,min_size=20)
    >>> usp.add_legends()
    >>> usp.add_sets_label(side="left")
    >>> usp.add_sets_size(side="left",pad=0.5, color = mpl.colormaps['tab20'].colors)
    >>> usp.highlight_subsets(facecolor='blue', min_size=30,max_size = 40,label="40 >= intersections >= 30")
    >>> usp.highlight_subsets(facecolor='red', min_size=20,max_size = 30,label="30 >= intersections >= 20")
    >>> usp.render()







