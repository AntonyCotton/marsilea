Upset plot
==========
| To visualize the intersection between more than 3 sets, the best option is to use an UpSet plot.
| Heatgraphy can also generate an flexible UpSet plot.


.. plot::
    :context: close-figs

    >>> from heatgraphy.upset import UpsetData
    >>> from heatgraphy.upset import Upset
    >>> sets = [[1,2,3,4], [3,4,5,6],[4,5,6,7,8]]
    >>> data = UpsetData.from_sets(sets)
    >>> usp = Upset(data, add_labels=False, add_sets_size=False)
    >>> usp.render()

Now we have a basic UpSet plot. It is important to note that data generated by :meth:`Upsetdata.from_sets() <heatgraphy.upset.UpsetData.from_sets>`
is just the intermediate state, you should further used :meth:`Upset <heatgraphy.upset.Upset>`
to gain the result that could use :meth:`render() <heatgraphy.base.Base.render>`
to plot.

However, the intermediate state could be used to get information of sets.
For example, if you want know sets name the item is in, you could use :meth:`has_item() <heatgraphy.upset.UpsetData.has_item()>` funcction.

.. code-block:: python
    :context: close-figs

    >>> from heatgraphy.upset import UpsetData
    >>> from heatgraphy.upset import Upset
    >>> sets = [[1,2,3,4], [3,4,5,6],[4,5,6,7,8]]
    >>> data = UpsetData.from_sets(sets)
    >>> data.has_item(6)


Back to the UpSet plot, then we can add labels and size numbers.

.. plot::
    :context: close-figs

    >>> from heatgraphy.upset import UpsetData
    >>> from heatgraphy.upset import Upset
    >>> sets = [[1,2,3,4], [3,4,5,6],[4,5,6,7,8]]
    >>> data = UpsetData.from_sets(sets)
    >>> usp = Upset(data, add_labels=False, add_sets_size=False)
    >>> usp.add_sets_label('left',pad=0.3)
    >>> usp.add_sets_size('left',pad=0.3)
    >>> usp.render()


Data Input
----------

The data of upset is handled by :class:`UpsetData <heatgraphy.upset.UpsetData>`. It contains
helpful methods to help you query information about different sets.

.. code-block:: python

    >>> from heatgraphy.upset import UpsetData
    >>>


